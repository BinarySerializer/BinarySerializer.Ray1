using System.Collections.Generic;

namespace BinarySerializer.Ray1
{
    // Same struct as R1Jaguar_EventBlock, but in text
    public class Mapper_SaveEvents : Ray1TextSerializable
    {
        public Mapper_SaveEventInstance[][] SaveEventInstances { get; set; }

        public override void Read(Ray1TextParser parser)
        {
            var tempList = new List<Mapper_SaveEventInstance[]>();
            var tempGroupList = new List<Mapper_SaveEventInstance>();

            parser.SupportsComments = false;
            parser.SeparateAtPadding = true;

            string value;

            while ((value = parser.ReadValue()) != null)
            {
                // NOTE: There is data before the instances, but the game doesn't read it. It's auto-generated by the editor when saving based on memory offsets, probably for debugging and/or compiling on Jaguar.

                // Check for event instances
                if (value == "ev_ty1")
                {
                    Mapper_SaveEventInstance item = new Mapper_SaveEventInstance();
                    item.IsValid = parser.ReadShortValue();
                    item.OffsetX = parser.ReadShortValue();
                    item.OffsetY = parser.ReadShortValue();
                    item.EventDefinitionKey = parser.ReadValue();
                    item.HitPoints = parser.ReadShortValue();
                    item.InitFlag = parser.ReadByteValue();
                    item.LinkID = parser.ReadShortValue();
                    tempGroupList.Add(item);
                }
                // Check for group end
                else if (value == "ev_end")
                {
                    tempList.Add(tempGroupList.ToArray());
                    tempGroupList.Clear();
                }
            }

            SaveEventInstances = tempList.ToArray();
        }
    }
}